{
	"name": "OpenAI",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"targetSparkConfiguration": {
			"referenceName": "config",
			"type": "SparkConfigurationReference"
		},
		"sessionProperties": {
			"driverMemory": "400g",
			"driverCores": 64,
			"executorMemory": "400g",
			"executorCores": 64,
			"numExecutors": 7,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "7",
				"spark.dynamicAllocation.maxExecutors": "7",
				"spark.autotune.trackingId": "837c996d-ea67-486f-878e-0958db08eb48"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9c8ddc83-7afd-41e0-933d-bce1bbdd626a/resourceGroups/Purviewinaday/providers/Microsoft.Synapse/workspaces/synapsepurviewday/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://synapsepurviewday.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 64,
				"memory": 400,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30,
			"targetSparkConfiguration": "config"
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import openai\r\n",
					"import re\r\n",
					"import requests\r\n",
					"import sys\r\n",
					"from num2words import num2words\r\n",
					"import os\r\n",
					"import pandas as pd\r\n",
					"import tiktoken\r\n",
					"import numpy as np\r\n",
					"import json"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"echo export AZURE_OPENAI_API_KEY=\"REPLACE_WITH_YOUR_KEY_VALUE_HERE\"\r\n",
					"echo export AZURE_OPENAI_ENDPOINT=\"REPLACE_WITH_YOUR_ENDPOINT_HERE\"\r\n",
					"\r\n",
					"source /etc/environment"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(dataframe_name)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import openai\r\n",
					"import os\r\n",
					"import re\r\n",
					"import requests\r\n",
					"import sys\r\n",
					"from num2words import num2words\r\n",
					"import os\r\n",
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"from openai.embeddings_utils import get_embedding, cosine_similarity\r\n",
					"import tiktoken\r\n",
					"#API_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\r\n",
					"#RESOURCE_ENDPOINT = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\r\n",
					"API_KEY = \"a3afc9ec6d694c258fab36ec451dfdc1\"\r\n",
					"RESOURCE_ENDPOINT = \"https://sjopenai.openai.azure.com/\"\r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_key = API_KEY\r\n",
					"openai.api_base = RESOURCE_ENDPOINT\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"openai.api_base = \"https://sjopenai.openai.azure.com/\"\r\n",
					"url = openai.api_base + \"/openai/deployments?api-version=2022-12-01\"\r\n",
					"r = requests.get(url, headers={\"api-key\": API_KEY})\r\n",
					"if r is not None:\r\n",
					" print(r.text)\r\n",
					"else:\r\n",
					" print(\"Error: Request returned NoneType object.\")\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import openai\r\n",
					"import os\r\n",
					"import re\r\n",
					"import requests\r\n",
					"import sys\r\n",
					"from num2words import num2words\r\n",
					"import os\r\n",
					"import pandas as pd\r\n",
					"import numpy as np\r\n",
					"from openai.embeddings_utils import get_embedding, cosine_similarity\r\n",
					"import tiktoken\r\n",
					"API_KEY = os.getenv(\"AZURE_OPENAI_API_KEY\")\r\n",
					"RESOURCE_ENDPOINT = os.getenv(\"AZURE_OPENAI_ENDPOINT\")\r\n",
					"openai.api_type = \"azure\"\r\n",
					"openai.api_key = API_KEY\r\n",
					"openai.api_base = RESOURCE_ENDPOINT\r\n",
					"openai.api_version = \"2022-12-01\"\r\n",
					"url = openai.api_base + \"/openai/deployments?api-version=2022-12-01\"\r\n",
					"r = requests.get(url, headers={\"api-key\": API_KEY})\r\n",
					"if r is not None:\r\n",
					" print(r.text)\r\n",
					"else:\r\n",
					" print(\"Error: Request returned NoneType object.\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dir (tiktoken)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tiktoken.__spec__"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pkg_resources"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"tiktoken.__version__"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(tiktoken.__version__)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip show tiktoken"
				]
			}
		]
	}
}